AWSTemplateFormatVersion : 2010-09-09
Description : EKS Stack
Parameters:
  ProjectName:
    Type: String
    Description: The name of the project
    Default: ExampleNetworkingTemplate
  Environment:
    Type: String
    Description: The environment which this template has been deployed in
    Default: Example
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: The list of SecurityGroupIds to associate with the EKS cluster
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of Subnet Ids to associate with the EKS cluster

Resources:
  EksIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  NodeGroupIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  Cluster:
    Type: AWS::EKS::Cluster
    Properties: 
      Name: !Sub "${ProjectName}-${Environment}-ekscluster"
      ResourcesVpcConfig: 
        SecurityGroupIds: !Ref SecurityGroups
        SubnetIds: !Ref Subnets
      RoleArn: !GetAtt EksIamRole.Arn

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties: 
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      ClusterName: !Ref Cluster
      ForceUpdateEnabled: true
      InstanceTypes: 
        - t2.micro
      NodegroupName: !Sub "${ProjectName}-${Environment}-Nodegroup"
      NodeRole: !GetAtt NodeGroupIamRole.Arn
      RemoteAccess: 
        Ec2SshKey: general-key-1
        # SourceSecurityGroups: With this empty, default is 0.0.0.0/0:22 open
      ScalingConfig: 
        DesiredSize: 1
        MaxSize: 1
        MinSize: 1
      Labels:
        Name: !Ref ProjectName
        Environment: !Ref Environment
      Subnets: !Ref Subnets
      # Tags:
      #   - Key: Name
      #     Value: !Ref ProjectName
      #   - Key: Environment
      #     Value: !Ref Environment

Outputs:
  EksRoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EksIamRole.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-eks-role-arn"
  NodeGroupRoleArn:
    Description: The role that EKS NodeGroup will use
    Value: !GetAtt NodeGroupIamRole.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-nodegroup-role-arn"